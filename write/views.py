# -*- coding: utf-8 -*-

import json
from datetime import datetime

from django.http import HttpResponse, Http404, HttpResponseForbidden
from django.shortcuts import render_to_response, redirect
from django.template import RequestContext, Template, Context, loader
from django.contrib.auth.decorators import login_required

from write.models import MtEntry, MtAuthor, MtComment

@login_required(login_url='/or/login')
def wall(request):
    tpl_params = {}
    tpl_params['entries'] = MtEntry.objects.all()
    tpl_params['latest_entry'] = tpl_params['entries'].filter(entry_status=2)[0]
    entries_hash = [e.entry_event() for e in MtEntry.objects.all()]
    tpl_params['entries_json'] = json.dumps(entries_hash, indent=2, ensure_ascii=False)
    tpl_params['EDITING'] = True
    tpl_params['andor'] = '/or/'
    return render_to_response("wall.html", tpl_params, context_instance = RequestContext(request))

def index_php(request):
    e = MtEntry.objects.filter(entry_status=2)[0]
    return HttpResponse("""<?php
header('Location: %s');
?>""" % e.get_absolute_url(), content_type="text/plain; charset=utf-8")

def latest_entry_read(request):
    e = MtEntry.objects.filter(entry_status=2)[0]
    return redirect('entry-read', slug=e.entry_slug()) 

def latest_entry_write(request):
    e = MtEntry.objects.all()[0]
    return redirect('entry-write', slug=e.entry_slug())

def archives(request):
    tpl_params = {}
    tpl_params['entries'] = MtEntry.objects.filter(entry_status=2)
    tpl_params['latest_entry'] = tpl_params['entries'].filter(entry_status=2)[0]
    tpl_params['EDITING'] = False
    tpl_params['andor'] = '/and/'
    return render_to_response("archives.html", tpl_params, context_instance = RequestContext(request))

    
def entry(request, slug, editing=False):
    """
    Strictly speaking, the following is *not* a good idea.
    Because we are required to not use hyphens in entry_basename.
    
    An entry with entry_basename bowie_star-man is
    generated by Movable Type as bowie-star-man.html
    
    There is no straight-forward way then, to go from
    the url back to the basename. The way we do it,
    with url /bowie-star-man, the system would replace the - with _
    and look for the entry with entry_basename bowie_star_man
    """
    basename = slug.replace('-','_')
    try:
        entry = MtEntry.objects.get(entry_basename=basename)
    except MtEntry.DoesNotExist:
        if not editing:
            raise Http404
        entry = MtEntry(entry_basename=basename)
        entry.entry_authored_on = entry.entry_created_on = datetime.now()
        entry.entry_created_by = entry.entry_author_id= 3 # glit by default
        entry.entry_text = """
        <p>Hello dear start the editing process.</p>
        """
        
        entry.entry_title = slug.replace('-',' ').title()
        entry.entry_status = 1 # draft by default
    
    # We can not read unpublished entries, except when providing a ‘secret token’
    # This is not supposed to be a secure: it is more of a low garden fence
    # than it is a lock
    if not editing and entry.entry_status != 2 and not request.user.is_authenticated():
        if request.GET.get('the_secret_question', '') != 'the_secret_answer':
            return HttpResponseForbidden()
    
    author = MtAuthor.objects.get(pk=entry.entry_author_id)
    
    author_ids = (3, 4, 5, 6, 7, 8) # the i.liketightpant contributors
    authors = MtAuthor.objects.all()
    main_authors = MtAuthor.objects.filter(author_id__in=author_ids)
    
    published_entries = MtEntry.objects.filter(entry_status=2)
    published_entries_ids = [e.entry_id for e in published_entries]
    visible_comments = MtComment.objects.filter(comment_visible=1).filter(comment_entry_id__in=published_entries_ids)
    
    tpl_params = {}
    tpl_params['EDITING'] = editing
    tpl_params['andor'] = '/or/' if editing else '/and/'
    
    tpl_params['e'] = entry
    tpl_params['e_comments'] = MtComment.objects.filter(comment_entry_id=entry.entry_id).filter(comment_visible=1).order_by('comment_created_on')
    tpl_params['a'] = author
    tpl_params['a_entries'] = published_entries.filter(entry_author_id=author.author_id).exclude(pk=entry.entry_id)
    tpl_params['a_comments'] = visible_comments.filter(comment_commenter_id=author.author_id)[:10]
    
    tpl_params['authors'] = authors
    tpl_params['author_ids'] = author_ids
    tpl_params['main_authors'] = main_authors
    tpl_params['recent_entries'] = published_entries.filter(entry_status=2)[:10]
    tpl_params['latest_entry'] = tpl_params['recent_entries'][0]
    tpl_params['recent_comments'] = visible_comments[:10]
    tpl_params['parent'] = None

    return render_to_response("entry.html", tpl_params, context_instance = RequestContext(request))
    
        

def entry_read(request, slug):
    return entry(request, slug, False)

@login_required(login_url='/or/login')
def entry_write(request, slug):
    return entry(request, slug, True)

def about(request):
    """
    3 = glit
    4 = jenseits
    5 = habitus
    6 = tellyou
    7 = baseline
    8 = bnf
    
    """
    tpl_params = {}
    
    tpl_params['glit_entries'] = MtEntry.objects.filter(entry_author_id=3).filter(entry_status=2)
    tpl_params['glit_comments'] = MtComment.objects.filter(comment_visible=1).filter(comment_commenter_id=3)[:5]
    tpl_params['jenseits_entries'] = MtEntry.objects.filter(entry_author_id=4).filter(entry_status=2)
    tpl_params['jenseits_comments'] = MtComment.objects.filter(comment_visible=1).filter(comment_commenter_id=4)[:5]
    tpl_params['habitus_entries'] = MtEntry.objects.filter(entry_author_id=5).filter(entry_status=2)
    tpl_params['habitus_comments'] = MtComment.objects.filter(comment_visible=1).filter(comment_commenter_id=5)[:5]
    tpl_params['tellyou_entries'] = MtEntry.objects.filter(entry_author_id=6).filter(entry_status=2)
    tpl_params['tellyou_comments'] = MtComment.objects.filter(comment_visible=1).filter(comment_commenter_id=6)[:5]
    tpl_params['baseline_entries'] = MtEntry.objects.filter(entry_author_id=7).filter(entry_status=2)
    tpl_params['baseline_comments'] = MtComment.objects.filter(comment_visible=1).filter(comment_commenter_id=7)[:5]
    tpl_params['bnf_entries'] = MtEntry.objects.filter(entry_author_id=8).filter(entry_status=2)
    tpl_params['bnf_comments'] = MtComment.objects.filter(comment_visible=1).filter(comment_commenter_id=8)[:5]
    
    return render_to_response("about.html", tpl_params, context_instance = RequestContext(request))

def feed(request):
    tpl_params = {}
    tpl_params['entries'] = MtEntry.objects.filter(entry_status=2)[:15]
    
    t = loader.get_template('recent_entries.xml')
    c = Context(tpl_params)
    return HttpResponse(t.render(c), mimetype="application/atom+xml; charset=utf-8")

def links(request):
    """
    Offer the links to integrate with Aloha’s repository API
    http://www.aloha-editor.org/guides/repository.html
    """
    published_entries = MtEntry.objects.filter(entry_status=2)
    entry_links = []
    for entry in published_entries:
        entry_links.append({
            "link" : entry.get_absolute_url(),
            "id"   : entry.get_absolute_url(),
            "name": "I like tight pants and " + entry.entry_title.lower(),
            "type" : "website"
        })
    return HttpResponse(json.dumps(entry_links, indent=2, ensure_ascii=False), mimetype="application/json; charset=utf-8")
